{"version":3,"sources":["components/Table/CountryTableBody.tsx","components/Table/CountryTableHeader.tsx","components/Table/TableHelpers.ts","components/Table/CountriesTable.tsx","components/Search/Search.tsx","components/Regions/Regions.tsx","App.tsx","index.tsx"],"names":["CountryTableBody","country","TableRow","TableCell","name","region","subregion","capital","area","toLocaleString","population","_id","CountryTableHeader","headCell","orderBy","order","createSortHandler","TableSortLabel","active","id","direction","onClick","label","headCells","numeric","disablePadding","descendingComparator","a","b","getComparator","stableSort","array","comparator","stabilizedThis","map","el","index","sort","COUTRIES_TABLE_QUERY","gql","CountriesTable","searchTerm","searchField","useQuery","data","loading","error","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","countryList","setCountryList","searchedCountryList","setSearchedCountryList","property","event","handleRequestSort","useEffect","Country","rest","convertCountryDtoToCountryType","console","log","filter","toLowerCase","includes","parseInt","message","TableContainer","Table","TableHead","TableBody","slice","row","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","newPage","onChangeRowsPerPage","target","value","Search","searchUpdate","Grid","TextField","onChange","e","field","Regions","search","setSearch","setSearchField","container","item","xs","searchText","searchFieldUsed","App","httpLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"wRAQaA,EAA8B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5C,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAYF,EAAQG,OACpB,cAACD,EAAA,EAAD,UAAYF,EAAQI,SACpB,cAACF,EAAA,EAAD,UAAYF,EAAQK,YACpB,cAACH,EAAA,EAAD,UAAYF,EAAQM,QAAUN,EAAQM,QAAU,QAChD,cAACJ,EAAA,EAAD,UACGF,EAAQO,KAAOP,EAAQO,KAAKC,iBAAmB,QAElD,cAACN,EAAA,EAAD,UACGF,EAAQS,WAAaT,EAAQS,WAAWD,iBAAmB,UATjDR,EAAQU,M,SCIdC,EAAgC,SAAC,GAKvC,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,MACAC,EACI,EADJA,kBAEA,OACE,cAACC,EAAA,EAAD,CACEC,OAAQJ,IAAYD,EAASM,GAC7BC,UAAWN,IAAYD,EAASM,GAAKJ,EAAQ,MAC7CM,QAASL,EAAkBH,EAASM,IAHtC,SAKGN,EAASS,S,kBCnBHC,EAA8B,CACzC,CAAEJ,GAAI,OAAQK,SAAS,EAAOC,gBAAgB,EAAMH,MAAO,WAC3D,CAAEH,GAAI,SAAUK,SAAS,EAAMC,gBAAgB,EAAOH,MAAO,UAC7D,CAAEH,GAAI,YAAaK,SAAS,EAAMC,gBAAgB,EAAOH,MAAO,aAChE,CAAEH,GAAI,UAAWK,SAAS,EAAMC,gBAAgB,EAAOH,MAAO,WAC9D,CACEH,GAAI,OACJK,SAAS,EACTC,gBAAgB,EAChBH,MAAO,UAET,CACEH,GAAI,aACJK,SAAS,EACTC,gBAAgB,EAChBH,MAAO,eAeEI,EAAuB,SAAIC,EAAMC,EAAMd,GAClD,OAAIc,EAAEd,GAAWa,EAAEb,IACT,EAENc,EAAEd,GAAWa,EAAEb,GACV,EAEF,GAGIe,EAAgB,SAC3Bd,EACAD,GAKA,MAAiB,SAAVC,EACH,SAACY,EAAGC,GAAJ,OAAUF,EAAqBC,EAAGC,EAAGd,IACrC,SAACa,EAAGC,GAAJ,OAAWF,EAAqBC,EAAGC,EAAGd,KAG/BgB,EAAa,SACxBC,EACAC,GAEA,IAAMC,EAAiBF,EAAMG,KAAI,SAACC,EAAIC,GAAL,MAAe,CAACD,EAAIC,MAMrD,OALAH,EAAeI,MAAK,SAACV,EAAGC,GACtB,IAAMb,EAAQiB,EAAWL,EAAE,GAAIC,EAAE,IACjC,OAAc,IAAVb,EAAoBA,EACjBY,EAAE,GAAKC,EAAE,MAEXK,EAAeC,KAAI,SAACC,GAAD,OAAQA,EAAG,OC1CjCG,EAAuBC,cAAH,uNAuBbC,EAA4B,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAAkB,EACvCC,mBAASL,GAAlCM,EADgE,EAChEA,KAAMC,EAD0D,EAC1DA,QAASC,EADiD,EACjDA,MADiD,EAE9CC,mBAAgB,OAF8B,mBAEjEhC,EAFiE,KAE1DiC,EAF0D,OAG1CD,mBAA4B,QAHc,mBAGjEjC,EAHiE,KAGxDmC,EAHwD,OAIhDF,mBAAS,GAJuC,mBAIjEG,EAJiE,KAI3DC,EAJ2D,OAKlCJ,mBAAS,IALyB,mBAKjEK,EALiE,KAKpDC,EALoD,OAMlCN,qBANkC,mBAMjEO,EANiE,KAMpDC,EANoD,OAUpER,qBAVoE,mBAQtES,EARsE,KAStEC,EATsE,KAgClEzC,EAAoB,SAAC0C,GAAD,OAAiC,SACzDC,IArBwB,SACxBA,EACAD,GAGAV,EADclC,IAAY4C,GAAsB,QAAV3C,EACrB,OAAS,OAC1BkC,EAAWS,GAiBXE,CAAkBD,EAAOD,KAmF3B,OAhFAG,qBAAU,WACJjB,GAAQA,EAAKkB,SACfP,EACEX,EAAKkB,QAAQ5B,KAAI,SAACU,GAAD,ODjEqB,SAAC,GAGX,IAFlCtC,EAEiC,EAFjCA,UACGyD,EAC8B,6BACjC,OAAO,aACLzD,UAAWA,EAAYA,EAAUF,KAAO,MACxCC,OAAQC,GAAaA,EAAUD,OAASC,EAAUD,OAAOD,KAAO,OAC7D2D,GC2DGC,CAA+BpB,SAIpC,CAACA,IAEJiB,qBAAU,WACRJ,EAAuBH,KACtB,CAACA,IAEJW,QAAQC,IAAIxB,GAEZmB,qBAAU,WACR,GAAIP,GAAeb,GAAcC,EAAa,CAC5C,OAAQA,GACN,IAAK,OACHe,EACEH,EAAYa,QAAO,SAAClE,GAClB,OAAOA,EAAQG,KACZgE,cACAC,SAAS5B,EAAW2B,mBAG3B,MACF,IAAK,SACHX,EACEH,EAAYa,QAAO,SAAClE,GAClB,OAAOA,EAAQI,OACZ+D,cACAC,SAAS5B,EAAW2B,mBAG3B,MACF,IAAK,YACHX,EACEH,EAAYa,QAAO,SAAClE,GAClB,OAAOA,EAAQK,UACZ8D,cACAC,SAAS5B,EAAW2B,mBAG3B,MACF,IAAK,UACHX,EACEH,EAAYa,QAAO,SAAClE,GAClB,OAAOA,EAAQM,QACZ6D,cACAC,SAAS5B,EAAW2B,mBAG3B,MACF,IAAK,OACHX,EACEH,EAAYa,QAAO,SAAClE,GAClB,OAAOA,EAAQO,OAAS8D,SAAS7B,OAGrC,MACF,IAAK,aACHgB,EACEH,EAAYa,QAAO,SAAClE,GAClB,OAAOA,EAAQS,aAAe4D,SAAS7B,OAO/CgB,EACEH,EAAYa,QAAO,SAAClE,GAClB,OAAOA,EAAQG,KAAKgE,cAAcC,SAAS5B,EAAW2B,sBAI3D,CAAC3B,IAEAI,GAAWC,EACN,4BAAIA,EAAQA,EAAMyB,QAAU,eAInC,qCACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACxE,EAAA,EAAD,UACGqB,EAAUW,KAAI,SAACrB,GAAD,OACb,cAACV,EAAA,EAAD,UACE,cAAC,EAAD,CACEU,SAAUA,EACVC,QAASA,EACTC,MAAOA,EACPC,kBAAmB,kBAAMA,EAAkBH,EAASM,QALxCN,EAASM,WAW/B,cAACwD,EAAA,EAAD,UACGnB,GACC1B,EAAW0B,EAAqB3B,EAAcd,EAAOD,IAClD8D,MAAM1B,EAAOE,EAAaF,EAAOE,EAAcA,GAC/ClB,KAAI,SAAC2C,GACJ,OAAO,cAAC,EAAD,CAAgC5E,QAAS4E,GAAlBA,EAAIlE,eAK9C,cAACmE,EAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,GAAI,IAC5BC,UAAU,MACVC,MAAOzB,EAAsBA,EAAoB0B,OAAS,EAC1D9B,YAAaA,EACbF,KAAMA,EACNiC,aAvImB,SAACxB,EAAgByB,GACxCjC,EAAQiC,IAuIJC,oBApI0B,SAC9B1B,GAEAN,EAAeiB,SAASX,EAAM2B,OAAOC,MAAO,KAC5CpC,EAAQ,U,SCtECqC,EAAoB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAMlC,OACE,cAACC,EAAA,EAAD,UACGnE,EAAUW,KAAI,SAACrB,GAAD,OACb,cAAC8E,EAAA,EAAD,CACErE,MAAOT,EAASS,MAChBsE,SAAU,SAACC,GAAD,OAVMlC,EAUgBkC,EAVJC,EAUOjF,EAASM,QAT9CwC,GAASA,EAAM2B,QAAU3B,EAAM2B,QACjCG,EAAa9B,EAAM2B,OAAOC,MAAOO,IAFd,IAACnC,EAAYmC,WCJzBC,EAAU,WAAO,IAAD,EACChD,qBADD,mBACpBiD,EADoB,KACZC,EADY,OAEWlD,qBAFX,mBAEpBL,EAFoB,KAEPwD,EAFO,KAY3B,OACE,eAACR,EAAA,EAAD,CAAMS,WAAS,EAAf,UACE,cAACT,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CAAQZ,aAXO,SACnBa,EACAC,GAEAN,EAAUK,GACVJ,EAAeK,QAQb,cAACb,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CAAgB5D,WAAYuD,EAAQtD,YAAaA,UCpB1C,SAAS8D,IACtB,OAAO,cAAC,EAAD,ICIT,IAAMC,EAAWC,yBAAe,CAC9BC,IAAK,+CAGDC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,KAAMP,IAGRQ,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAACJ,EAAD,MAEFW,SAASC,eAAe,W","file":"static/js/main.9f4f8a6a.chunk.js","sourcesContent":["import { TableRow, TableCell } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { CountryType } from \"../../types/types\";\n\ntype Props = {\n  country: CountryType;\n};\n\nexport const CountryTableBody: FC<Props> = ({ country }) => {\n  return (\n    <TableRow key={country._id}>\n      <TableCell>{country.name}</TableCell>\n      <TableCell>{country.region}</TableCell>\n      <TableCell>{country.subregion}</TableCell>\n      <TableCell>{country.capital ? country.capital : \"N/A\"}</TableCell>\n      <TableCell>\n        {country.area ? country.area.toLocaleString() : \"N/A\"}\n      </TableCell>\n      <TableCell>\n        {country.population ? country.population.toLocaleString() : \"N/A\"}\n      </TableCell>\n    </TableRow>\n  );\n};\n","import { TableCell, TableSortLabel } from \"@material-ui/core\";\nimport { MouseEventHandler } from \"react\";\nimport { FC } from \"react\";\nimport { CountryType, Order } from \"../../types/types\";\n\ntype Props = {\n  headCell: any;\n  orderBy: keyof CountryType;\n  order: Order;\n  createSortHandler: (\n    id: string\n  ) => MouseEventHandler<HTMLAnchorElement> | undefined;\n};\n\nexport const CountryTableHeader: FC<Props> = ({\n  headCell,\n  orderBy,\n  order,\n  createSortHandler,\n}) => {\n  return (\n    <TableSortLabel\n      active={orderBy === headCell.id}\n      direction={orderBy === headCell.id ? order : \"asc\"}\n      onClick={createSortHandler(headCell.id)}\n    >\n      {headCell.label}\n    </TableSortLabel>\n  );\n};\n","import {\n  CountryDtoType,\n  CountryType,\n  HeadCellListType,\n  Order,\n} from \"../../types/types\";\n\nexport const headCells: HeadCellListType = [\n  { id: \"name\", numeric: false, disablePadding: true, label: \"Country\" },\n  { id: \"region\", numeric: true, disablePadding: false, label: \"Region\" },\n  { id: \"subregion\", numeric: true, disablePadding: false, label: \"Subregion\" },\n  { id: \"capital\", numeric: true, disablePadding: false, label: \"Capital\" },\n  {\n    id: \"area\",\n    numeric: true,\n    disablePadding: false,\n    label: \"kmÂ²\",\n  },\n  {\n    id: \"population\",\n    numeric: true,\n    disablePadding: false,\n    label: \"Population\",\n  },\n];\n\nexport const convertCountryDtoToCountryType = ({\n  subregion,\n  ...rest\n}: CountryDtoType): CountryType => {\n  return {\n    subregion: subregion ? subregion.name : \"N/A\",\n    region: subregion && subregion.region ? subregion.region.name : \"N/A\",\n    ...rest,\n  };\n};\n\nexport const descendingComparator = <T>(a: T, b: T, orderBy: keyof T) => {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n};\n\nexport const getComparator = <Key extends keyof any>(\n  order: Order,\n  orderBy: Key\n): ((\n  a: { [key in Key]: number | string | undefined },\n  b: { [key in Key]: number | string | undefined }\n) => number) => {\n  return order === \"desc\"\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n};\n\nexport const stableSort = <T>(\n  array: T[],\n  comparator: (a: T, b: T) => number\n) => {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n};\n","import { gql, useQuery } from \"@apollo/client\";\nimport {\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  TablePagination,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\nimport {\n  CountryDtoType,\n  CountryListType,\n  CountryType,\n  Order,\n} from \"../../types/types\";\nimport { CountryTableBody } from \"./CountryTableBody\";\nimport { CountryTableHeader } from \"./CountryTableHeader\";\nimport {\n  convertCountryDtoToCountryType,\n  getComparator,\n  headCells,\n  stableSort,\n} from \"./TableHelpers\";\n\nconst COUTRIES_TABLE_QUERY = gql`\n  {\n    Country {\n      _id\n      name\n      area\n      capital\n      population\n      subregion {\n        name\n        region {\n          name\n        }\n      }\n    }\n  }\n`;\n\ntype Props = {\n  searchTerm: string | undefined;\n  searchField: keyof CountryType | undefined;\n};\n\nexport const CountriesTable: FC<Props> = ({ searchTerm, searchField }) => {\n  const { data, loading, error } = useQuery(COUTRIES_TABLE_QUERY);\n  const [order, setOrder] = useState<Order>(\"asc\");\n  const [orderBy, setOrderBy] = useState<keyof CountryType>(\"name\");\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [countryList, setCountryList] = useState<CountryListType>();\n  const [\n    searchedCountryList,\n    setSearchedCountryList,\n  ] = useState<CountryListType>();\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof CountryType\n  ) => {\n    const isAsc = orderBy === property && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const createSortHandler = (property: keyof CountryType) => (\n    event: React.MouseEvent<unknown>\n  ) => {\n    handleRequestSort(event, property);\n  };\n\n  useEffect(() => {\n    if (data && data.Country) {\n      setCountryList(\n        data.Country.map((data: CountryDtoType) =>\n          convertCountryDtoToCountryType(data)\n        )\n      );\n    }\n  }, [data]);\n\n  useEffect(() => {\n    setSearchedCountryList(countryList);\n  }, [countryList]);\n\n  console.log(searchField);\n\n  useEffect(() => {\n    if (countryList && searchTerm && searchField) {\n      switch (searchField) {\n        case \"name\":\n          setSearchedCountryList(\n            countryList.filter((country) => {\n              return country.name\n                .toLowerCase()\n                .includes(searchTerm.toLowerCase());\n            })\n          );\n          break;\n        case \"region\":\n          setSearchedCountryList(\n            countryList.filter((country) => {\n              return country.region\n                .toLowerCase()\n                .includes(searchTerm.toLowerCase());\n            })\n          );\n          break;\n        case \"subregion\":\n          setSearchedCountryList(\n            countryList.filter((country) => {\n              return country.subregion\n                .toLowerCase()\n                .includes(searchTerm.toLowerCase());\n            })\n          );\n          break;\n        case \"capital\":\n          setSearchedCountryList(\n            countryList.filter((country) => {\n              return country.capital\n                .toLowerCase()\n                .includes(searchTerm.toLowerCase());\n            })\n          );\n          break;\n        case \"area\":\n          setSearchedCountryList(\n            countryList.filter((country) => {\n              return country.area === parseInt(searchTerm);\n            })\n          );\n          break;\n        case \"population\":\n          setSearchedCountryList(\n            countryList.filter((country) => {\n              return country.population === parseInt(searchTerm);\n            })\n          );\n          break;\n        default:\n          break;\n      }\n      setSearchedCountryList(\n        countryList.filter((country) => {\n          return country.name.toLowerCase().includes(searchTerm.toLowerCase());\n        })\n      );\n    }\n  }, [searchTerm]);\n\n  if (loading || error) {\n    return <p>{error ? error.message : \"Loading...\"}</p>;\n  }\n\n  return (\n    <>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {headCells.map((headCell: any) => (\n                <TableCell key={headCell.id}>\n                  <CountryTableHeader\n                    headCell={headCell}\n                    orderBy={orderBy}\n                    order={order}\n                    createSortHandler={() => createSortHandler(headCell.id)}\n                  />\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {searchedCountryList &&\n              stableSort(searchedCountryList, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  return <CountryTableBody key={row._id} country={row} />;\n                })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25]}\n        component=\"div\"\n        count={searchedCountryList ? searchedCountryList.length : 0}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </>\n  );\n};\n","import { Grid, TextField } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { CountryType } from \"../../types/types\";\nimport { headCells } from \"../Table/TableHelpers\";\n\ntype Props = {\n  searchUpdate: (searchText: string, searchField: keyof CountryType) => void;\n};\n\nexport const Search: FC<Props> = ({ searchUpdate }) => {\n  const handleOnChange = (event: any, field: keyof CountryType) => {\n    if (event && event.target && event.target)\n      searchUpdate(event.target.value, field);\n  };\n\n  return (\n    <Grid>\n      {headCells.map((headCell: any) => (\n        <TextField\n          label={headCell.label}\n          onChange={(e) => handleOnChange(e, headCell.id)}\n        ></TextField>\n      ))}\n    </Grid>\n  );\n};\n","import { Grid } from \"@material-ui/core\";\nimport { CountryType, RegionType } from \"../../types/types\";\nimport { CountriesTable } from \"../Table/CountriesTable\";\nimport { Search } from \"../Search/Search\";\nimport { useState } from \"react\";\n\nexport const Regions = () => {\n  const [search, setSearch] = useState<string | undefined>();\n  const [searchField, setSearchField] = useState<keyof CountryType>();\n\n  const searchUpdate = (\n    searchText: string,\n    searchFieldUsed: keyof CountryType\n  ) => {\n    setSearch(searchText);\n    setSearchField(searchFieldUsed);\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <Search searchUpdate={searchUpdate} />\n      </Grid>\n      <Grid item xs={12}>\n        <CountriesTable searchTerm={search} searchField={searchField} />\n      </Grid>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Regions } from \"./components/Regions/Regions\";\n\nexport default function App() {\n  return <Regions></Regions>;\n  // return (\n  //   <Router>\n  //     <div>\n  //       <nav>\n  //         <ul>\n  //           <li>\n  //             <Link to=\"/\">Home</Link>\n  //           </li>\n  //           <li>\n  //             <Link to=\"/about\">About</Link>\n  //           </li>\n  //           <li>\n  //             <Link to=\"/users\">Users</Link>\n  //           </li>\n  //         </ul>\n  //       </nav>\n\n  //       {/* A <Switch> looks through its children <Route>s and\n  //           renders the first one that matches the current URL. */}\n  //       <Switch>\n  //         <Route path=\"/\">\n  //           <Regions />\n  //         </Route>\n  //         {/* <Route path=\"/users\">\n  //           <Users />\n  //         </Route>\n  //         <Route path=\"/\">\n  //           <Home />\n  //         </Route> */}\n  //       </Switch>\n  //     </div>\n  //   </Router>\n  // );\n}\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://countries-274616.ew.r.appspot.com/\",\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: httpLink,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}